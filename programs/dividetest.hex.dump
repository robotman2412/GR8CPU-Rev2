$00 - $01                load    # 5                02 05 
$02 - $03                store   remainder          22 85 
$04 - $05                load    # 2                02 02 
$06 - $07                store   divider            22 84 
$08 - $09                load    # m1               02 0e 
$0a - $0b                store   div_ret            22 8f 
$0c - $0d                jump    divide             11 86 
$0e - $0f   m1           load    # msg1             02 98 
$10 - $11                store   printx_msg         22 79 
$12 - $13                load    # m2               02 18 
$14 - $15                store   printx_ret         22 7d 
$16 - $17                jump    printx             11 78 
$18 - $19   m2           load    result             01 83 
$1a - $1b                store   number             22 38 
$1c - $1d                load    # m3               02 22 
$1e - $1f                store   btd_ret            22 77 
$20 - $21                jump    btd                11 3b 
$22 - $23   m3           load    # msg2             02 a1 
$24 - $25                store   printx_msg         22 79 
$26 - $27                load    # m4               02 2c 
$28 - $29                store   printx_ret         22 7d 
$2a - $2b                jump    printx             11 78 
$2c - $2d   m4           load    remainder          01 85 
$2e - $2f                store   number             22 38 
$30 - $31                load    # m5               02 36 
$32 - $33                store   btd_ret            22 77 
$34 - $35                jump    btd                11 3b 
$36 - $36   m5           halt                       3f 
$37 - $37   asc_start    data    $30                30 
$38 - $38   number       data    $00                00 
$39 - $39   hundreds     data    $00                00 
$3a - $3a   tens         data    $00                00 
$3b         btd                                     
$3b - $3c                load    # $00              02 00 
$3d - $3e                store   hundreds           22 39 
$3f - $40                store   tens               22 3a 
$41         btd_loop                                
$41 - $42                load    number             01 38 
$43 - $44                comp    # 100              10 64 
$45 - $46                jump    btd_loop1 , A < B  16 4f 
$47 - $48                sub     # 100              0d 64 
$49 - $4a                store   number             22 38 
$4b - $4c                inc     hundreds           23 39 
$4d - $4e                jump    btd_loop           11 41 
$4f         btd_loop1                               
$4f - $50                comp    # 10               10 0a 
$51 - $52                jump    btd_end , A < B    16 5b 
$53 - $54                sub     # 10               0d 0a 
$55 - $56                store   number             22 38 
$57 - $58                inc     tens               23 3a 
$59 - $5a                jump    btd_loop           11 41 
$5b         btd_end                                 
$5b - $5c                load    hundreds           01 39 
$5d - $5e                comp    # $01              10 01 
$5f - $60                jump    btd_end1 , A < B   16 66 
$61 - $62                add     asc_start          07 37 
$63 - $63                copy    A to D             04 
$64 - $65                jump    btd_end2           11 6c 
$66 - $67   btd_end1     load    tens               01 3a 
$68 - $69                comp    # $01              10 01 
$6a - $6b                jump    btd_end3 , A < B   16 71 
$6c - $6d   btd_end2     load    tens               01 3a 
$6e - $6f                add     asc_start          07 37 
$70 - $70                copy    A to D             04 
$71 - $72   btd_end3     load    asc_start          01 37 
$73 - $74                add     number             07 38 
$75 - $75                copy    A to D             04 
$76 - $77   btd_jmp      jump    $00                11 00 
$78         btd_ret      =       btd_jmp + 1        
$78         printx                                  
$78 - $79                load    $00                01 00 
$7a         printx_msg   =       printx + 1         
$7a - $7b                comp    # $00              10 00 
$7c - $7d   printx_jmp   jump    $00 , A = B        12 00 
$7e         printx_ret   =       printx_jmp + 1     
$7e - $7e                copy    A to D             04 
$7f - $80                inc     printx_msg         23 79 
$81 - $82                jump    printx             11 78 
$83 - $83   result       data    $00                00 
$84 - $84   divider      data    $00                00 
$85 - $85   remainder    data    $00                00 
$86 - $87   divide       load    # $00              02 00 
$88 - $89                store   result             22 83 
$8a - $8b   div_loop     load    remainder          01 85 
$8c - $8d                comp    divider            0f 84 
$8e - $8f   div_mret     jump    $00 , A < B        16 00 
$90         div_ret      =       div_mret + 1       
$90 - $91                sub     divider            0b 84 
$92 - $93                store   remainder          22 85 
$94 - $95                inc     result             23 83 
$96 - $97                jump    div_loop           11 8a 
$98 - $a0   msg1         data    "Result: \0"       52 65 73 75 6c 74 3a 20 00 
$a1 - $ac   msg2         data    "\nRemainder: "    0a 52 65 6d 61 69 6e 64 65 72 3a 20 

Labels:

tens       $3a
btd_loop1  $4f
btd_end2   $6c
printx_ret $7d
result     $83
asc_start  $37
number     $38
btd_end3   $71
btd        $3b
divider    $84
btd_end1   $66
divide     $86
hundreds   $39
btd_jmp    $76
msg2       $a1
msg1       $98
m1         $0e
printx_jmp $7c
m2         $18
m3         $22
m4         $2c
m5         $36
btd_loop   $41
btd_end    $5b
div_mret   $8e
printx_msg $79
div_ret    $8f
btd_ret    $77
printx     $78
remainder  $85
div_loop   $8a

Program length: 173 / 256 bytes (67.578125% of maximum size)
